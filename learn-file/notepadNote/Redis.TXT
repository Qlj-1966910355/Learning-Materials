
-> NoSql概述
	背景<mysql演变>
		本质：解决读与写的效率问题。
			单机版MySql中的问题：
					// 数据量太大，单机就放不下
					// 数据的索引，单机内存放不下
					// 访问量(读写混合)，单机承受不住

			衍生出‘memcached(缓存)+mysql+垂直拆分’：
					<服务器垂直拆分<读写分离>，将写入内容同步到其他服务器>
					// 网站大部分情况下都是去访问读取数据，每次都需要与数据库交互查询，影响效率，数据压力较大
			
				解决：在访问中间添加一个缓存，数据缓存之后，提升效率
			
			缓存演变：
					优化数据库结构与索引 ---> 文件缓存(io操作) ---> memcacahed
				
			分库分表+水平拆分+mysql集群
					// 将几个单机组合成一组作战单元，这个作战单元有主从之分，而这个作战单元就是一个节点(小集群)，多个节点组成一个大的项目集群。
						<节点也可以是一个单机，只是这个节点很小而已，每个节点的任务可能不同>
			
	为什么要使用NoSql？
		在应用使用时会出现，用户的个人信息、社交网络、地理位置产生大量用户日志等数据，这种爆发式增长需要使用NoSql数据库。
		同时，由于关系型数据库面对大数据时，其扩展性、高昂的表变更成本、高并发容量、写入延迟等方面有限。
		
	什么是NoSql？
			<not only sql 不仅仅是sql，泛指非关系型数据库>

	NoSql特点：
		// 方便扩展<数据之间没有强关系，很好扩展>
		// 大数据量高性能<Redis一秒8万次，读取11万。NoSql的缓存记录级，是一种细粒度的存储，性能很高>
		// 数据类型是多样型的<不需要事先设计数据库，随取随用>
	
	传统RDBMS<关系型>与NoSql区别；
		关系型：
			结构化组织、sql、数据和关系都存储在单独的表中、数据操纵与定义语言、严格一致性、基础的事务、...
		NoSql：
			不仅仅是数据、没有固定的查询语言、键值对存储，列存储，文档存储，图形数据库、最终一致性、CAP定理和BASE、高性能，高可用，高扩展
	
	大数据时代的 3V+3高：
		3V：<主要是描述问题的>
			海量(Volume)、多样(Variety)<数据类型众多>、实时(Velocity)
		3高：<主要是对程序的要求>
			高并发、高可扩(随时水平拆分)、高性能
	
	
	NoSql四大数据类型分类
		1、key-value键值对
			应用场景：内容缓存，主要用于处理大量的高访问负载，也用于一些日志系统等等。
			优点：查询速度快
			缺点：数据无结构化，通常只被当做字符串或者二进制数据。
				
		2、文档型数据<bson格式(与json一样)>
			数据模型：key-value键值对，value是结构化数据
			举例：
				-> MongoDB
					MongoDB是一个基于分布式文件存储的数据库，C++编写，用来处理大量的文档。
					它是介于关系型数据库和非关系型数据库的中间产品。且是非关系型数据库中功能最丰富的，最像关系型数据库的。
				-> ConthDB
			应用场景：Web应用(与键值对类似，value是结构化的，不同的是数据库能够了解value的内容)
			优点：数据结构要求不严格，表结构可变，不需要像关系型数据库一样预定义表结构。
			缺点：查询性能不高，而且缺乏统一的查询语法。
			
		3、列存储数据库
			数据模型：以列簇式存储，将同一列数据存在一起。
			举例：
				-> HBase
				-> Cassandra
			应用场景：分布式的文件系统
			优点：查询速度快，可扩展性强，更容易进行分布式扩展。
			缺点：功能相对局限
			
		4、图关系数据库
			数据模型：图结构<一种网络图数据结构，就是数学中的图论>
			举例：
				-> Neo4J
				-> InfoGrid
			应用场景：社交网络、推荐系统等，专注于构建关系图谱
			优点：利用图结构相关算法。比如最短路径寻址，N度关系查找等
			缺点：很多时候需要对整个图做计算才能得到需要的信息，而且这种结构不太好做分布式的集群方式

-------------------------------------------
学习中文网：http://www.redis.cn/
下载：官网下载，windows在github上下载，当然也可以将linux版本安装在windows上


-> Redis概述
	<Remote Dictionary Server>，远程字典服务
		是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日执行、key-value数据库，并提供多种语言的API。
	
	Redis作用：
		内存存储<将数据缓存到内存中>;
		持久化：将内存中的数据持久化到磁盘中，内存中的数据是断电即失的(持久化的重要性)<RDB、AOF>。
		效率高，可以用于高速缓存。
		发布订阅系统
		地图信息分析
		计时器、计数器(浏览量)

-> 安装与运行
	windows上：
		安装：
				安装包：https://github.com/dmajkic/redis/releases
			直接解压即可。
		运行：
			开启Redis，双击运行服务<redis-server.exe>即可。
			默认端口：6379
		客户端运行：
			双击<redis-cl.exe>客户端服务。(注意不要关闭服务端)
			测试是否连接到服务端：ping ==> PONG		|		<设置键值对>set name qlj	 |	 <通过key获取value>get name
			
	linux上：
		下载安装包：在官网下载。
		https://redis.io/download/#redis-downloads			<redis-6.2.7.tar.gz>
		
		安装：
			// 将tar.gz压缩包传输到linux系统中，存放位置：/opt/redis
			// 解压(在压缩包所在目录下进行解压)：tar -zxvf redis-6.2.7.tar.gz
			// 进入解压的文件目录中：cd redis-6.2.7/
			// 在redis-6.2.7目录中执行'make'命令。(此时只是编译完成，并没有安装)
				<注意：必须有gcc才可以make成功>
			// 执行'make install'命令，默认在'/usr/local/bin/'目录下安装。
				介绍几个文件：
					redis-benchmark：性能测试工具。<可执行文件>
					redis-check-aof：修复有问题的AOF文件。
					redis-check-rdb：修复有问题的dump.rdb文件
					redis-sentinel：Redis集群使用
					redis-server：Redis服务器启动文件。<可执行文件>
					redis-cli：客户端操作入口。<可执行文件>
		
		前台启动：
			前台启动时命令行窗口不能关闭。
			直接执行'redis-server'命令。<ctrl+c可以停止>
			
		后台服务启动****************：
			// 备份redis.conf。<在解压文件位置'/opt/redis/redis-6.2.7/'中的redis.conf>
				命令：cp redis.conf /etc/
			// 进入/etc/目录，查看是否存在redis.conf文件。<ll | grep redis.conf>
			// 修改etc内的redis.conf文件。
				将'daemonize no' 改成'daemonize yes'。

		-> 服务启动运行
			进入'/usr/local/bin/'目录内，启动redis。
				执行命令：redis-server /etc/redis.conf			<查看是否启动：ps -ef | grep redis>
				
			cd /usr/local/bin/
			redis-server /etc/redis.conf					// 启动
		-> 停止服务
			redis-cli -u 123456 shutdown			// 由于配置了密码，所以要通过密码指定密码进行停止
			kill PID		// 杀死进程
			
			-> 开机自启redis服务
				-> 创建一个系统服务文件：vim /etc/systemd/system/redis.service
				-> 写入文件内容：
						[Unit]
						Description=redis-server
						After=network.target
						
						[Service]
						Type=forking
						ExecStart=/usr/local/bin/redis-server /usr/local/src/redis-6.2.6/redis.conf
						PrivateTmp=true
						
						[Install]
						WantedBy=multi-user.target
				-> 重载系统服务命令：systemctl daemon-reload
				-> 启动redis：systemctl start redis
				-> 查看redis运行状态：systemctl status redis
				-> 停止redis：systemctl stop redis
				-> 重启redis：systemctl restart redis
				-> 开机自启：systemctl enable redis
		
		
-> redis客户端	<使用redis>
	// 命令行客户端
		使用命令行客户端：
			执行命令：redis-cli [option] [commonds]
				[option]：
					-h 127.0.0.1	<指定要连接的redis节点的ip地址，默认是127.0.0.1(本地)>
					-p 6379				<指定要连接的redis节点的端口，默认6379>
					-a 123456			<指定redis访问密码，没有密码可以不指定>
				[commonds]：<redis操作命令，一般不指定>
					ping：与redis服务端做心跳测试，服务端正常就返回pong
					// 不指定commond时，会进入redis-cli的交互平台。
			例：进入命令行客户端
				方式一：
					redis-cli -h 127.0.0.1 -p 6379 -a 123456
					// 测试进入
					ping			// 输出pong,表示正常
				方式二：
					// 依次执行
					redis-cli -h 127.0.0.1 -p 6379
					auth 123456				// 没有用户名时就是直接写密码
					ping
			Ctrl+C 可以退出客户端
		
	// 图形化桌面客户端
		下载地址：https://github.com/lework/RedisDesktopManager-Windows/releases
			下载 resp-2022.4.2.zip 
		直接win下解压，安装即可。
		rdm.exe文件就是运行文件。
	
	// 编程客户端
	

-> redis配置文件redis.conf介绍
	配置文件中只支持bytes，不支持bit，大小写不敏感。
	includes部分。指配置文件可以包含其他文件的内容，使用include关键字实现。

	-> bind=127.0.0.1		// 只能接受本机的访问请求(想要远程连接要将其注释掉，且将protected-mode 改成no)
		不写的情况下，无限制接收任何ip地址的访问。<生产环境下要写服务器的地址，服务器需要远程访问，所以需要将其注释掉。>
		注意：
			如果开启了protected-mode(保护模式)，那么在没有设定bind ip且没有设密码的情况下，redis只允许接收本机的响应。
	-> port 6379			// 端口号	
	-> tcp-backlog 511			// 高并发环境下需要一个高backlog值来避免慢客户端连接问题。
	-> timeout 0				// 使用redis时，很长时间不使用时就会超时，0表示永不超时(秒)。
	-> daemonize yes			// redis是否为后台进程，设置为yes
	-> logfile ""					// 设置redis日志输出文件，默认为空
	-> databases 16				// redis默认有16个库
	-> SECURITY部分。redis默认没有设置密码<打开'requirepass foobared'的注释>
		// 或者使用命令进行设置redis密码
			config get requirepass
			config set requirepass "123456"
			auth 123456
	-> limits部分
		maxclients			// 设置redis同时可以连接的客户端数量，默认10000个
		maxmemory				// 最大内存容量。<建议必须设置，否则内存满了后服务器就会宕机，redis移除一部分数据>

		
	
-> 基础知识
	1、linux总共有16个数据库，从0~15。
		// 如何查看?	<直接vim查看redis的配置文件>
		// 如何切换？	<select 序号。 例：select 2   切换到第三个数据库>
			命令：
				-> dbsize							<查看数据库使用情况>
				-> set name qlj				<向数据库中存储一个键值对(name:qlj)>
				-> get name						<根据键取出对应的值>
				-> keys *							<查看所有的key。(必须在存储的数据库中查找)>
				-> flushdb						<清空当前数据库>
				-> flushall						<清空全部数据库内容>
				-> exists name				<判断集合中是否包含'name'这个key是否存在，存在返回1>
				-> move name 1				<移动key为'name'的键值对到指定数据库1中，相当于剪切复制>
				-> expire name 10			<设置10s后，key为name的键值对就会过期，过期后就查询不到了>
					可以使用 ttl name 命令查询过期剩余时间
				-> type name 					<返回key所存储的value值类型>
				-> hlep @generic			<查看所有类型通用的命令，也可以修改@后面的类型，如：help @hash>
				------------
				-> append name " nb"	<对指定key的value后拼接字符串,key值不存在时就创建键值对。例：添加后(name:qlj nb)>
				-> strlen name ""			<通过key获取value字符串长度>

	2、redis是单线程的
		redis是基于内存操作的，CPU并不是redis的性能瓶颈，redis的瓶颈是根据机器的内存以及网络带宽所决定的。
		
		为什么单线程效率却很快？
			-> 首先，现在的CPU一般都是由多个核心组成，每个核心可以认为是一个独立的处理器，它们能够并行的处理任务。
			   所以，如果我们的CPU是多核的，但是程序是单线程的，那么执行程序时，这个线程在某一时刻只能在一个核心上
			   运行，而其他的核心就是空闲的(假设没有其他程序)。所以，为了提高CPU的使用率，我们可以创建多个线程，每
			   个线程处理任务的一部分(每个部分不依赖)，而每个核心执行一个线程，此时CPU的使用率将提高，程序运行速度
			   自然就会提高。
			-> 除此之外，假设我们的程序有A、B、C三个任务要执行，但是由于程序使用的是单线程，这些任务只能轮流执行，
			   A执行完毕后，其他任务再依次执行。如果A任务是一个比较耗时间的任务，此时B与C任务就要等待很长时间才能
			   执行。如果使用多线程，那么每个线程被分配到不同的核心上，可以并行的执行；若核心数量不够，CPU将采用时
			   间片轮转算法，轮流为每个线程分配时间片执行，这样后续任务也可以进行并发执行，无需等待之前的任务完成，
			   任务的响应速度变得更加均匀。
			<理解redis的单线程>
			-> redis中的单线程并不是指redis程序只会有一个线程。而是指redis处理客户端的数据请求，只会使用一个线程去
			   执行。但是实际上redis在执行其他操作时，可能会开启多个进程或线程，比如说持久化，就会fork出一个子进程，
			   然后子进程创建快照，完成持久化操作。
			<redis为什么是单线程>
			-> redis将数据存放在内存中，这就意味着，redis在操作数据时，不需要进行磁盘的IO，磁盘IO是一个比较耗时的操
			   作，所以对于需要磁盘IO的程序，我们就可以使用多线程，在某个线程进行IO操作的时候，CPU切换到当前程序的其
			   他线程执行，以此减少CPU的等待时间。而redis直接操作内存中的数据，所以使用多线程并不能有效的提升效率，
			   相反，使用多线程反而会因为需要进行线程切换降低效率。
			   (当然在CPU切换线程的时候，有一个上下文切换时间，而这个上下文切换时间是非常耗费时间的)
			-> 除此之外，使用多线程的话，多个线程之间进行同步，保证线程的安全，也需要开销的。尤其是redis数据结构是一
			   些实现较为简单的集合结构，若使用多线程，将会频繁的发生线程冲突，线程的竞争频率较高，反倒会拖慢redis的
			   响应速度。
			<redis如何提高CPU的使用率>
			-> 前面说过，现在的CPU一般都有多个核心，每个核心可以单独执行。redis处理客户端请求使用单线程，那么自然而然，
			   无法将CPU的核心都占用，也就造成了资源的浪费。为了解决这一问题，我们可以在同一个服务器上开启多个redis程
			   序，每个redis程序使用不同的端口，相互独立，以此提高CPU的使用率，而这么多redis程序可以配置成主从节点，共
			   同为一个程序服务，也可以相互独立，服务于多个程序。
			总结：
				总的来说，redis使用单线程的原因就是：多线程并不能有效地提高redis的性能，相反可能还会降低性能，所以自然就
				会使用单线程。
	
	3、数据类型
		redis是一个key-value的数据库，key一般都是String类型，而value的类型较多。
			例如：
				-- 基本类型
					String：hello word
					Hash：{name:"qlj",age:23}
					List：[A -> B -> C -> C]
					Set：{A,B,C}
					SortedSet(Zset)：{A:1,B:2,C:3}
				-- 特殊类型(redis6新类型)
					GEO：{A:{120.3,30.5}}
					BitMap：0101101101
					HyperLog：0101101101
			
		-> 常用命令
			// 查看帮助信息
				help del			<查看del指令如何使用>
				help @generic	<查看通用的命令使用方式>
			
			// 查看符合模板的所有key，生产环境下不建议使用这种方式查询
				keys *				<后面可以进行模糊查询，*表示任意字符;?表示单个字符>
					
			// 删除一个或多个指定的key
				del key [key...] 			<后面可以跟多个keyname，返回的是删除的数量>			
			
			// 判断key是否存在
				exists key [key...]				<判断库中是否存在指定的key，存在返回1，可指定多个key>
			
			// 给一个key设置有效时间，有效时间到期就会自动删除
				expire key 时间(秒)				<例：expire name 10		// 可以使用  命令>
			
			// 查询指定key的剩余时间
				ttl key								<-2 表示过期，-1 表示永久有效，正数 表示剩余时间(秒)>
				
				
		-> String
			字符串类型，是redis中最简单的存储类型。
			value可以根据字符串的格式，再细分为3类：
				string：普通字符串	<例：a:hello>
				int：整数类型，可以做自增自减	<例：b:12>
				float：浮点类型，可以做自增自减	<例：c:12.1>
			注意：
				不管是哪种类型的String，底层都是字节数组形式存储，只是编码方式不同。字符串类型最大空间不超过512M
				
			-> 常用String命令
				// set：添加或修改已经存在的一个String类型的键值对
					例：set name qlj
				// get：根据key获取String类型的value
					例：get name
				// mset：批量添加多个String类型的键值对
					例：mset a 1 b 2.1 c 3
				// mget：根据多个key获取多个String类型的value
					例：mget a b c
					
				// incr：让一个整型的key自增1
					例：incr a		<2>
				// incrby：让一个整型的key自增并指定步长。
					例：incrby a 2		<3>			|			incrby a -1		<0>
				// incrbyfloat：让一个浮点类型的数字自增并指定步长
					例：incrbyfloat b 0.5			<2.6>
					
				// setnx：添加一个String类型的键值对，前提是这个key不存在，否则不执行
					例：setnx	name zmq			<由于库中存在name:qlj，此时出现相同的key，所以不执行>
				// setex：添加一个String类型的键值对，并且指定有效期
					例：setex name 10 zmq 			// 等同于：set name zmq ex 10
						<注意：expire命令是当键值存在的情况下才指定有效期，而setex命令在创建时进行指定有效期>
							
			-> redis没有mysql一样的表结构，如何区分不同业务类型的key？
				例：需要存储用户与商品的信息，有一个用户的id是1，刚好商品的id也是1。
				-> 层级结构
					redis中的key允许多个单词形成层级结构，多个单词之间使用':'隔开。
						格式：项目名:业务名:类型:id					<例：key1 = shop:user:1	key2 = shop:product:1>
					格式并不是固定的，可以根据具体业务结构制定。
					例：
						<注意两种':'不要混淆>
						shop:user:1 : {"id":1, "name":"qlj", "age":23}
						shop:product:1 : {"id":1, "name":"手机", "价格":4999}
							// 注意：如果在使用set存储时，使用String(json)字符串类型，需要给字符串添加单引号。如果是Hash类型，则直接添加
					
		-> Hash类型
			Hash类型也称散列，其value是一个无序字典(可以存储一个实际对象)，类似于Java中的HashMap结构。
				例：
					shop:user:1 : {"id":1, "name":"qlj", "age":23}
					key : {field:value,field:value,...}
			与value为String(json)类型的区别：
				String结构是将对象序列化为json字符串后存储，当需要修改对象某个字段时很不方便。
				Hash结构可以将对象中的每个字段独立存储，可以根据单个字段做crud
				也就是说：json格式的字符串实际就是字符串，它是一个整体，想要处理value中指定的字段时，就要做截取等等一系列操作才能将字段信息修改
				          而Hash类型的value，每个元素都是一个field:value，与json看似相同，实则是不同结构，Hash可以直接通过field(字段)处理value。
			
			Hash类型的数据结构：
				当value中的field-value较少时，使用ziplist压缩列表，当field-value较多时，则采用hashtable哈希表结构。
			
			-> 常用Hash命令
				// hset key field value：将哈希表key中的字段field的值修改/添加为value 
					例：hset shop:user:1 id 1		|		hset shop:user:1 name qlj		|		hset shop:user:1 age 23
				// hget key field：获取存储在哈希表中指定字段的值。
					例：hset shop:user:1 name
				// hmset：批量将多个field-value(域-值)对设置到哈希表key中。
					例：hmset shop:user:2 id 2 name zmq age 22
				// hmget：批量获取所有给定字段的值
					例：hmget shop:user:2 id name age
				// hgetall：获取在哈希表中指定key的所有字段和值
					例：hgetall shop:user:2			<类似java的entrySet()方法>
				// hkeys：获取所有哈希表中的字段
					例：hkeys shop:user:2
				// hvals：获取哈希表中所有value值
					例：hvals shop:user:2
				// hincrby：让一个hash类型key的字段值自增并指定步长
					例：hincrby shop:user:2 age 2				<年龄字段的value值增加了2>
				// hsetnx：添加一个hash类型的key的field，前提是这个field不存在，否则不执行
					例：hsetnx shop:user:2 sex woman			<没有field为sex的字段，所以添加成功>
				
		-> List类型
			Redis中的List类型与LinkedList类似，可以看做是一个双向链表(实际更复杂quicklist)，既可以正向检索也可以反向检索。
			特征：
				有序：指存取顺序，并不是数据排序<索引号从0开始>
				元素可重复<指value中的元素>
				插入和删除快
				查询速度一般
			注意：List类型对两端的操作性能很高，通过索引下标的操作中间的元素节点性能会较差。
			
			-> QuickList数据结构
				List的数据结构实际是一种快速链表QuickList。
				// 数据量较少时
					首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，叫做压缩列表。
					压缩列表将所有元素紧挨着一起存储，分配的是一块连续的内存。
				// 数据量较多时
					数据量较多后就会改成quicklist结构。
					因为普通的链表需要附加指针空间太大，会比较浪费空间。比如这个列表里存的只是int类型的数据，结构上还需要两个额外的指针前驱、后继。
					quicklist结构是将多个ziplist使用双向链表结构串起来。这样既能满足快速插入删除性能，又不会占用较大空间。
					结构：
						ziplist1 <==> ziplist2 <==> ziplist3
			
			-> 常用List命令
				// lpush key element ...：向列表左侧(链头)插入一个或多个元素
					例：lpush stu:user:1 a b c
						<注意：实际上先执行将a插入链头，然后依次插入，所以最后一个c元素就在链头，它的索引序号为1>
				// lpop key：移除并返回列表左侧的第一个元素，没有则返回nil
					例：lpop stu:user:1 2				<2表示移除个数，移除左边两个元素，同时输出两个元素值>
					
				// rpush key element ...：向列表右侧(链尾)插入一个或多个元素
					例：rpush stu:user:1 4 5 6				<4先插到链尾，最终6是链尾>
				// rpop key：移除并返回列表右侧的第一个元素
					例：rpop stu:user:1 2		<2表示移除个数>
				
				// lindex key index：按照索引下标获得元素(从左到右)
					例：lindex stu:user:1 0
				// llen
					例：llen stu:user:1
					
				// lrange key star end：返回一段索引角标范围内的所有元素<闭区间>	(end 可以取-1,表示最后一个值)
					例：lrange shop:user:2 1 2		<第2个元素与第3个元素>
				// blpop和brpop：与lpop和rpop，只不过在没有元素时等待指定时间，而不是直接返回nil
					例：blpop stu:user:2 10
						<如果没有这个key程序就会阻塞，10s内如果有其他用户添加，在阻塞结束输出value，否则10s后退出>
			
			-> List可以模拟栈、队列、阻塞队列
								
		-> Set类型
			redis中的Set结构与java中的HashSet类似，所以其特性与HashSet也类似。
			特征：
				无序：指存取顺序无序，无索引值
				元素不可重复
				查找快
				支持交集、并集、差集等功能	
		
			-> Set常用命令
				// sadd key element：向set中添加一个或多个元素
				// srem key element：移除set中的指定元素
				// scard key：返回set中元素个数
				// sismember key element：判断一个元素是否存在于set中
				// smembers：获取set中的所有元素
				
				// sinter key1 key2：获取key1集合与key2集合的交集
				// sdiff key1 key2：获取key1中存在key2中没有的元素
				// sunion key1 key2：并集，不重复(重复只保留一个)
				
		-> SortedSet(ZSet)类型
				redis的SortedSet是一个可排序的set集合，与java中TreeSet功能类似，但是底层数据结构区别很大。SortedSet中的每个元素都带有一个
			score属性，可以基于score属性对元素排序，底层的实现是一个跳表(SkipList)加hash表。
			特征：
				可排序：指元素的排序
				元素不重复
				查询速度快
				
			SortedSet结构：
					SortedSet是Redis提供的一个非常特别的数据结构，一方面它等价于java的数据结构Map<String,Double>，可以给每个元素value赋予一个权重
				score，另一方面它又类似于TreeSet，内部的元素会按照权重score进行排序，可以得到每个元素的名次，还可以通过score的范围来获取元素列
				表。
				ZSet底层的两个数据结构：
					hash：hash的作用就是关联元素value和权重score，保障元素value的唯一性，可以通过元素value找到相应的score值。
					跳表(SkipList)：跳跃表的目的在于给元素value排序，根据score的范围获取元素列表。
						
						-> 跳表<层次化链表>
							引言：
								对于数组来说：如果数据是有序的，搜索操作可以使用二分法搜索，时间复杂度为O(logn)，但是插入与删除时时间复杂度则需要O(n)。
								对于链表来说：即使链表是有序的，其搜索操作也无法使用二分法查找，只能按照顺序依次查询，时间复杂度O(n)，但插入与删除时间
								              复杂度是O(1)
								为了兼顾查找、插入、删除的效率，人们使用平衡二叉树。但无论是AVL树还是红黑树，其实结构都比较复杂。
								跳跃表的实现更为简单，且能够更好地支持范围查询。跳跃表中的元素是有序的，其查询、插入、删除的时间复杂度都是O(logn)。
							思想：
								跳跃表的基本思想是'分层'。
								跳跃表由多层链表堆叠而成，每一层都是一个链表，且处于不同层次的链表的跨度有所不同。处于最底层的链表就是普通的双链表，
								其跨度为1。从纵向来看，处于不同层次、具有相同关键值的节点堆叠而成，每个堆叠也是一个纵向的双链表。
								<特殊的插入：采用生长概率逐层减半策略。>
									生长概率逐层减半：
											首先必须先查询找到插入位置，找到位置后就是解决如何让纵向塔继续向上生长的问题。对于一个纵向‘塔’来说，第i层中的节
										点在第i+1层中继续生长出现的概率是1/2。跳跃表通过此策略保证空间复杂度为O(n)
							
				
			-> SortedSet常用命令
				// zadd key score element：添加一个或多个元素到sortedset，如果已经存在则更新score值
					例：zadd student 98 qlj 85 zmq 78 wzx 89 xyq
				// zrem key element：删除sortedset中的一个指定元素
				// zscore key element：获取sortedset中指定元素的score值
				// zrank key element：获取sortedset中指定元素的排名		<升序，zrevrank命令是降序排列。'rev'降序>
				// zcard key：获取sortedset中的元素个数
				// zcount key min max：统计score值在给定范围内所有元素的个数
				// zincrby key increment element：让sortedset中的指定元素自增、步长为指定的increment值
				// **** zrange key min max：按照score排序后，获取指定排名范围内的元素		<zrevrange降序>		<查看全部元素：ZRANGE student 0 -1>
				// zrangebyscore key min max：按照score排序后，获取指定排名范围内的元素
				// zdiff、zinter、zunion：求差集、交集、并集

		-> BitMap
			使用场景：
					在平时开发过程中，经常会有一些bool类型数据需要存取。比如记录用户一年内签到的次数，签了是1，没签是0。如果使用key-value
				来存储，那么每个用户都要记录365次，当用户成百上亿时，需要的存储空间将非常巨大。为了解决这个问题，Redis提供了位图结构。
			
			位图（bitmap）
				bitmap同样属于string数据类型。Redis中一个字符串类型的value最多能存储512MB的内容，每个字符串由多个字节组成，每个字节又由8个Bit位组成。
				位图结构正是使用“位”来实现存储的，它通过将比特位设置为0或1来达到数据存取的目的，这大大增加了value存储数量。
				bitmap：存储上限为512*1024*1024*8(bit)。
				例：一个字符串"1" 占用一个字节，如果使用1表示true，则这个'boolean'(实际没有Boolean)占用了1个字节，即8个bit位。但如果直接使用bit存储
				    1或者0，则可以存储更多的信息。
				故：bitmap本质上可以看做是一个bit数组。数组的下标在bitmap中被称作偏移量(offset)。
				结构：
					key offset bool				
						// offset bool就是bitmap结构。
							offset:实际上就是数组下标，必须是int类型
							bool:只能存储0和1，表示状态。
				
			实例：
				1、判断用户登录状态
					存储结构：login:status : 10061457 1			// 表示10061457用户登录的状态是已登录
			
				2、用户本月签到情况
					存储结构：user:sign:10061457:202210 : 1 0 2 1 3 0		// 表示10061457用户在10月份签到情况，1号未签到，2号签到，3号未签到
						注意：此处只代表存储结构。第一次初始化bitmap时，如果偏移量很大，初始化过程较慢。
				
			常用命令：
				// setbit key offset value：设置bitmap中某个偏移量的值。(key在初始状态下所有的位都为0)
					例：setbit login:status 10061456 1
				// getbit key offset：获取key在指定位索引位置上对应的二进制值,要么是0要么是1
					例：getbit login:status 10061456
				// bitcount key [start end]：统计key所储存的字符串值中，指定字节区间[start,end]被设置为1的bit位的数量。<可以-1>
					注意：redis的setbit设置或清除的是bit位置，而bitcount计算的是byte位置，1byte=8bit。
						<一个字符串值就是8个bit位，所以对于bit数组来讲，就是8个bit为一组进行统计。当然直接使用get命令查时相当于ASCII值对于字符。>
					例：
						存：SETBIT test 0 1		SETBIT test 3 1		SETBIT test 7 1		SETBIT test 9 1		SETBIT test 15 1
							相当于：10010001 10000001
						统计：bitcount login:status 0 0		<返回：3>		bitcount login:status 0 1	<返回：5>
				// BITOP operation destkey key [key ...]：在字符串之间执行按位运算。
					operation：二进制位运算类型。and(与)、or(或)、xor(异或)、not(非)。<与、或、异或可以允许多个数量的位图进行运算，not只允许一个位图>
					destkey：用户存储运算结果的key名称。
					例：
						创建两个bitmap类型的数据：test1 : 10001010	test2 : 11110111
						与：BITOP and test3 test1 test2		运算结果存储在test3中<会自动创建test3并存储位图>。
						非：BITOP not test3 test3			运算后将test3原有位图覆盖
						
			bitmap缺点：
				1、数据碰撞：比如将字符串映射到bitmap的时候会出现碰撞问题。考虑使用bloom fiter来解决，使用多个hash函数进行转换减少冲突的概率。
				2、数据稀疏：比如在bitmap结构中只存入一个'2^32-1'值，此时就需要一个512M的空间进行存储，因为bitmap结构是通过bit的顺序来确定是否
							 存储该值(bit数组的2^32-1位上为1)。这个时候只想存一个数据，但却占用了512M空间。此时可以引入'Roaring BitMap'结构。
					Roaring BitMap：压缩位图。(简单来讲：将大块的bitmap分成各个小块，其中每个小块在需要存储数据的时候才会存在)		 
				
				注意：redis中，如果存入数据offset比较大，呈现稀疏数据时，会自己进行压缩处理。
				
		
		-> HyperLogLog
			<推荐文章：https://mp.weixin.qq.com/s?src=11&timestamp=1664708026&ver=4080&signature=TUqG-z9xYEp-hcYgkiHTpsv1qIIucw*sh5dh-LskP8sUdeNZqEScT6L40SpnS9R-xKAwE-8BBvT5RfG7IUetxBNAblakjq5HdLUWoTtd677EQXIL2y5CVKi4tNpruO9H&new=1
			https://www.yuque.com/abser/aboutme/nfx0a4
			>
			
			应用场景：
					统计某个页面的uv。和pv不同，在统计uv的时候需要根据用户id进行去重，因此就很难用一个简单的累加计数器来累加pv。当用户量达到千万
				甚至更高级别的时候，去重所需要的额外存储空间将是巨大的。而hyperloglog数据结构正是用来解决这类问题的，它用仅仅12kb的字节，就能统计
				2^64数量级别的去重数据统计。当然这种统计是一种估计量，当数量足够大的时候，误差在1%左右。因此如果我们要求的统计结果不需要特别精确，
				那么就可以使用这种数据结构节省大量存储空间。
				<pv与uv解释>
					pv，访问次数就相当于一个展览会的访问人次，某个参观者出入展馆10次的话，这10次都被记入访问次数中，相当于网络中的PV值。
					uv：独立访客数则相当于带身份证参观展览会的访问人数，每一个出示身份证参观展览的人，无论出入几次，都只计作一次独立访问。
			
			基数：通常用来统计一个集合中不重复的元素个数，例如统计某个网站的UV，或者用户搜索网站的关键词数量。
			
			原理及作用：
			
				hyperloglog适用于大数据量的去重统计。

				极大似然估计：当可观察的结果足够多时，我们可以“大概率”地推测出条件的状态。

				伯努利实验：扔硬币

				伯努利实验的极大似然估计：通过观察“最小概率”出现的实验结果，推测出实验进行的“大概率”次数

				redis通过hash算法，模拟伯努利实验，从而“大概率”推测出进行hash的次数。

				为了减少误差，redis进行了分桶和调和平均

				为了优化存储，redis引入了稀疏结构
		
		-> GEO
			Geohash编码原理文章参考：
				https://www.cnblogs.com/LBSer/p/3310455.html | https://zhuanlan.zhihu.com/p/405941061 | https://halfrost.com/go_spatial_search/

			Redis GEO并不是一种新的数据结构，而是基于SortedSet实现的。
			GEO原理：
				通过GeoHash编码，将元素对应的经纬度进行编码，然后将该元素id作为key，编码值作为score值存入SortedSet中，最后通过SortedSet的
				范围查询就可以完成我们的需求。
				
			GeoHash编码原理：
				以北京经纬度'经度=116.41667，维度=39.91667'为例。
				1、地球经度区间[-180,180]，将区间进行二分[-180,0)[0,180]，经度在右半区间时，记为1。经度左半区间时，记为0。(116.4记为1)；
				2、接着将[0,180]进行二分，判断在左半区间还是右半区间，以此类推。(迭代二分的越多，精度越高，redis二分了26次)；
				3、按照经度的方法，将维度也进行二分。(也进行26次二分)；
				4、经纬度二进制码进行组码。偶数位放经度，奇数位放纬度，形成52位二进制码。
				5、使用0-9、b-z（去掉a, i, l, o）这32个字母进行base32编码。首先将二进制转换为十进制，然后进行编码。(解码时反推即可)
				
		
			常用命令：
				// GEOADD key [NX|XX] [CH] longitude latitude member [longitude latitude member ...]
					将指定的空间元素(经度、纬度、元素名)添加到key对应的SortedSet中，GeoHash编码会将经纬度转化为52位比特值。
					参数：
						XX: 只更新已存在的元素，不添加新元素
						NX: 只添加新元素，不更新已存在元素
						CH: 改变命令返回值的逻辑（CH是change的缩写）。命令默认返回添加新元素的个数，不包含更新已存在的元素。
							使用后：命令返回被改变的元素数量，包括 添加新元素的数量 + 已存在元素被更新的数量
					注意：
						该命令的参数格式是固定的，即：经度要在纬度之前；
						有效的经度介于-180度至180度之间，有效的纬度介于-85.05112878度至85.05112878度之间；
						当给定的经纬度超出上述合法范围时，会返回error；
						Redis GEO没有删除命令'GEODEL'，因为底层使用的是Sorted Set，所以完全可以使用'ZREM'命令删除
					例：
						geoadd city NX 116.41667 39.91667 beijing			<先经后维>
						geoadd city 116.41667 39.91667 beijing  121.43333 34.50000 shanghai 117.20000 39.13333 tianjin
				
				// GEOPOS key member [member ...]
					返回给定元素对应的经纬度。
					注意：
						使用GEOADD添加的元素，会被GeoHash转化为52位比特值，因此使用GEOPOS取出值并转为经纬度时，可能与添加的经纬度值有少许差异。
					例：
						geopos city beijing nanjing
				
				// GEODIST key member1 member2 [m|km|ft|mi]
					返回两个给定元素之间的距离。<米|千米|英尺|英里>
					注意：
						在计算距离时会假设地球为完美的球形，在极限情况下最大会造成 0.5% 的误差。
					例：
						geodist city beijing shanghai km
				
				// GEOHASH key member [member ...]
					GEOADD命令会将经纬度编码为52bit，该命令返回GeoHash编码转换后的11位字符串表示形式，该字符串形式。
					注意：
						返回给定元素,GeoHash编码值对应的字符串表示。
					例：
						geohash city beijing		// 返回："wx4g14s53n0"
				
				// GEORADIUS key longitude latitude radius m|km|ft|mi
					通过给定的经纬度（longitude,latitude）和半径（radius）得到一个圆形区域，返回在区域内的元素。


-> redis的发布与订阅
	redis发布订阅是一种消息通讯模式，发送者(pub)发送消息，订阅者(sub)接收消息。
	redis客户端可以订阅任意数量的频道


-> redis的java客户端
	客户端网站：https://redis.io/clients				
	
	-> 常用客户端
		// Jedis
			以redis命令作为方法名称，学习成本低，简单实用。但是“Jedis实例是线程不安全的(只创建一个jedis对象时)，多线程环境下需要基于连接池来连接使用”
		// Lettuce
			Lettuce是基于Netty实现的，支持同步、异步和响应式编程方式，并且是线程安全的。支持Redis的哨兵模式、集群模式、管道模式。
		// Redisson
			Redisson是一个基于Redis实现的分布式、可伸缩的java数据结构集合。包含了诸如Map、Queue、Lock、Semaphore、AtomicLong等强大功能。
		<在Spring中使用Spring Data Redis，其底层兼容将了Jedis与Lettuce>
		
-> Jedis
	官网：https://github.com/redis/jedis
	
	使用步骤：
		0、创建maven项目
	
		1、引入依赖
			<dependency>
				<groupId>redis.clients</groupId>
				<artifactId>jedis</artifactId>
				<version>4.2.3</version>
			</dependency>

		2、设置redis.conf配置：
			// 将bind属性注释掉，允许远程连接。<windows下的项目访问linux也是远程>
			// 将protected-mode 改成no，关闭保护模式。
			// linux防火墙放行redis服务端口。<当然你可以直接关闭防火墙，但是不建议>
				方法：
					查看端口号：ps -ef | grep redis				// 6379
					打开端口：firewall-cmd --permanent --add-port=6379/tcp		<success开启成功>
					重启服务器：reboot
					查看是否已经开启：firewall-cmd --query-port=6379/tcp
									  firewall-cmd --zone=public --list-ports
		
		3、单元测试
			void geoTest() {
				// 创建jedis对象
				Jedis jds = new Jedis("192.168.10.128", 6379);

				// 清空数据库
				jds.flushAll();

				// 测试
				String ping = jds.ping();
				System.out.println(ping);		// pong成功
				
				// 查看所有key
				Set<String> keys = jds.keys("*");
				for (String key : keys) {
					System.out.println(key);
				}

				// 添加单个geo坐标
				// geoadd city 116.41667 39.91667 beijing  121.43333 34.50000 shanghai 117.20000 39.13333 tianjin
				jds.geoadd("city",116.41667,39.91667,"beijing");

				// 构造多个POI坐标
				GeoCoordinate shanghai = new GeoCoordinate(121.43333,34.50000);
				GeoCoordinate tianjin = new GeoCoordinate(117.20000,39.13333);
				Map<String, GeoCoordinate> map = new HashMap<>();
				map.put("shanghai", shanghai);
				map.put("tianjin", tianjin);

				// 添加多个坐标
				jds.geoadd("city", map);

				// 获取geo类型的数据<返回北京的经纬度>
				List<GeoCoordinate> list = jds.geopos("city", "beijing");
				for (GeoCoordinate geoCoordinate : list) {
					System.out.println(geoCoordinate.toString());
				}

				// 获取两个城市的距离 可以指定单位
				Double cityDist = jds.geodist("city", "beijing", "tianjin", KM);
				System.out.println(cityDist);
				
				// 以指定经纬度为中心，查找指定半径内的城市<以西安为例>
				List<GeoRadiusResponse> city = jds.georadius("city", 108.940174, 34.341568, 1000, KM);
				for (GeoRadiusResponse geoRadiusResponse : city) {
					System.out.println(geoRadiusResponse.getMemberByString());
				}
				
				// 查看所有POI
				List<GeoRadiusResponse> geoRadiusResponses = jds.georadiusByMember("city", "beijing", 1000, KM);
				for (GeoRadiusResponse geoRadiusRespons : geoRadiusResponses) {
					System.out.println(geoRadiusRespons.getMemberByString());
				}
				
				// 关闭Jedis对象
				jds.close()

			}
			

-> SpringDataRedis
	SpringDataRedis是专门用来支持在spring管理项目对redis的操作，使用java操作redis最常用的是使用jedis，但并不是只有jedis可以使用，像jdbc-redis、jredis
	也都属于redis的java客户端，他们之间是无法兼容的，如果你在一个项目中使用了jedis，然后后来决定弃用掉改用jdbc-redis就比较麻烦了，spring-data-redis提
	供了redis的java客户端的抽象，在开发中可以忽略掉切换具体的客户端所带来的影响，而且他本身就属于spring的一部分，比起单纯的使用jedis，更加稳定。管理
	起来更加自动化。
	
	-> 功能
		1、连接池自动管理，提供了一个高度封装的“RedisTemplate”类
		2、针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口
			ValueOperations				// 简单K-V操作						<对象创建：redisTemplate.opsForValue()>
			HashOperations				// 针对map类型的数据操作			<对象创建：redisTemplate.opsForHash()>
			ListOperations				// 针对list类型的数据操作			<对象创建：redisTemplate.opsForList()>
			SetOperations				// set类型数据操作					<对象创建：redisTemplate.opsForSet()>
			ZSetOperations				// zset类型数据操作					<对象创建：redisTemplate.opsForZSet()>
		3、提供的有相关的序列化器
			// JdkSerializationRedisSerializer
				POJO对象的存取场景，使用JDK本身序列化机制，将pojo类通过ObjectInputStream/ObjectOutputStream进行序列化操作，最终redis-server中将存储字
			节序列。是目前最常用的序列化策略。

			// StringRedisSerializer
				Key或者value为字符串的场景，根据指定的charset对数据的字节序列编码成string，是“new String(bytes, charset)”和
			“string.getBytes(charset)”的直接封装。是最轻量级和高效的策略。

			// JacksonJsonRedisSerializer
				jackson-json工具提供了javabean与json之间的转换能力，可以将pojo实例序列化成json格式存储在redis中，也可以将json格式的数据转换成
			pojo实例。因为jackson工具在序列化和反序列化时，需要明确指定Class类型，因此此策略封装起来稍微复杂。【需要jackson-mapper-asl工具支持】

			// OxmSerializer
				提供了将javabean与xml之间的转换能力，目前可用的三方支持包括jaxb，apache-xmlbeans；redis存储的数据将是xml工具。不过使用此策略，编程
			将会有些难度，而且效率最低；不建议使用。【需要spring-oxm模块的支持】
	
	
	-> SpringBoot使用SpringDataRedis
		<推荐文章：https://blog.csdn.net/weixin_56219549/article/details/119484442>
		1、项目创建，redis服务启动，防火墙端口放行
		2、引入依赖
			// redis依赖可以在创建项目时添加。
				<!--Redis依赖-->
				<dependency>
					<groupId>org.springframework.boot</groupId>
					<artifactId>spring-boot-starter-data-redis</artifactId>
				</dependency>
				<!--连接池依赖-->
				<dependency>
					<groupId>org.apache.commons</groupId>
					<artifactId>commons-pool2</artifactId>
				</dependency>
	
		3、配置yaml文件
			spring:
				redis:
					host: 192.168.10.128
					port: 6379
					database: 2   	#选择2号库，默认0号库
					#password:  	#默认为空
					lettuce:    	#使用lettuce实现(默认使用lettuce)，如果使用jedis实现需要引入jedis依赖
						pool:
							max-active: 20    #最大连接数，负值表示没有限制，默认为8
							max-wait: -1      #最大阻塞时间，负值表示没有限制，默认-1、
							max-idle: 8       #最大空闲连接数，默认为8
							min-idle: 0       #最小空闲连接数，默认为0
	
		4、自动注入RedisTemplate类型对象
			@Autowired
			private RedisTemplate redisTemplate
		
		5、测试
			@Resource
			private RedisTemplate redisTemplate;

			@Test
			void contextLoads() {
				ValueOperations ops = redisTemplate.opsForValue();
				ops.set("student:name", "qlj");

				System.out.println(ops.get("student:name"));
			}
		
	-> 序列化：
		注意：上面测试结果。set进入redis的数据使用的是jdk的序列化，所以直接在linux打开的redis-cli客户端查看时会存在乱码。
		例：key=\xac\xed\x00\x05t\x00\x0cstudent:name	value=\xac\xed\x00\x05t\x00\x03qlj
		原因：
			在Java中使用SpringDataRedis，可以接收任意类型(Object)的数据，然后将接受的数据转换成redis可以识别的类型，但是在Java中默认使用的序列化是jdk
			自带的序列化工具，redis反序列化时，存入的就是这样一串乱码的数据。因此，需要在java中配置序列化工具，便于redis反序列化。
			相反，当java想要获取redis中的数据时，由于redis中存入的就是jdk序列化工具产生的数据，所以取出后jdk反序列化就可以成功产生正常数据。
		
		源码：
			// RedisSerializer序列化工具接口，其他序列化属性默认为null。
			RedisSerializer keySerializer = null;
			RedisSerializer valueSerializer = null;
			RedisSerializer hashKeySerializer = null;
			RedisSerializer hashValueSerializer = null;
			// 当defaultSerializer为空时，java默认使用JdkSerializationRedisSerializer进行序列化<jdk序列化>。
			// jdk底层使用的是ObjectOutputStream对象流进行序列化。	
			if (defaultSerializer == null) {

				defaultSerializer = new JdkSerializationRedisSerializer(
						classLoader != null ? classLoader : this.getClass().getClassLoader());
			}
			
		
		-> 序列化工具的选择
			进入RedisSerializer接口中，Ctrl+H 查看当前接口的所有实现类，这些类就是具体实现的序列化工具。只需要指定其他序列化类即可。
			
			一般
				key对象的序列化选择：StringRedisSerializer
				value对象的序列化选择：GenericJackson2JsonRedisSerializer
		
		-> 如何改变RedisTemplate序列化方式
			1、创建Rdeisconfig类
			2、配置内容：
				@Configuration
				public class RedisConfig {
					@Bean
					public RedisTemplate<String,Object> redisTemplate(RedisConnectionFactory connectionFactory){
						// 创建RedisTemplate对象
						RedisTemplate<String, Object> template = new RedisTemplate<>();
						// 设置连接工厂
						template.setConnectionFactory(connectionFactory);
						// 创建json序列化工具
						GenericJackson2JsonRedisSerializer jsonRedisSerializer = new GenericJackson2JsonRedisSerializer();
						// 设置key的序列化
						template.setKeySerializer(RedisSerializer.string());
						template.setHashKeySerializer(RedisSerializer.string());
						// 设置value的序列化
						template.setValueSerializer(jsonRedisSerializer);
						template.setHashValueSerializer(jsonRedisSerializer);
						// 返回
						return template;
					}
				}
				
	
			3、测试：
				// 创建一个pojo实体类：
					@Data
					@NoArgsConstructor
					@AllArgsConstructor
					public class Student {
						private String name;
						private int age;
					}
	
				// 存储一个实体对象
					@Test
					void StudentTest() {
						// 存入
						redisTemplate.opsForValue().set("student:001",new Student("qlj",23));
						// 查询
						Student s = (Student)redisTemplate.opsForValue().get("student:001");
						System.out.println("s = " + s);			// s = Student(name=qlj, age=23)	<实际是一个Student类型对象>
					}
				
					查看图形化界面客户端中的数据：
						// 一个json数据。
						{
						  "@class": "com.sg.pojo.Student",
						  "name": "qlj",
						  "age": 23
						}
					
					注意：存入的数据中多存储了一个'@class'的值，作用是在java中使用get方法取出redis值时，返回一个实体对象，并不是一串字符串。
					
		-> 如何不在redis中写入实体类的@class信息
			<@class对象信息存储在redis中非常浪费空间>
				为了节省空间，我们并不会使用json序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要java对象时，
			手动完成对象的序列化和反序列化。
				当然如果不使用Json序列化器就不能再redis中存储实体对象信息，所以在get取出redis的值时就不会返回实体对象，只是一个字符串。
				因此，想要序列化与反序列化时就必须手动进行操作。
				然而，好消息：
					Spring默认提供了一个StringRedisTemplate类，它的key与value的序列化方式默认是String方式。省去了我们自定义配置RedisTemplate。
				
				StringRedisTemplate类底层配置了序列化为String类型<不需要RedisConfig配置类了>：
					setKeySerializer(RedisSerializer.string());
					setValueSerializer(RedisSerializer.string());
					setHashKeySerializer(RedisSerializer.string());
					setHashValueSerializer(RedisSerializer.string());
					
			操作：
				1、注入StringRedisTemplate类
					@Resource
					StringRedisTemplate stringRedisTemplate;
					
				2、注入Json工具
					// Json工具	<ObjectMapper是SpringMVC中默认实用的工具，也可以使用FastJson进行手动序列化>
					private static final ObjectMapper mapper = new ObjectMapper();
					
				3、测试
					@Test
					void StudentTest02() throws JsonProcessingException {
						// 创建对象
						Student s = new Student("zmq", 24);
						// 手动序列化
						String str = mapper.writeValueAsString(s);
						
						// 存入
						stringRedisTemplate.opsForValue().set("student:002",str);	// 不能直接存实体对象，因为不能自动序列化了
						// 查询
						String jsonStr = stringRedisTemplate.opsForValue().get("student:002");	// 查询出来一定是字符串类型
						
						// 手动反序列化
						Student stuObj = mapper.readValue(jsonStr, Student.class);
						System.out.println("stuObj:" + stuObj);
					}
					
		-> 序列化总结
			方案一：
				1、自定义RedisTemplate
				2、修改RedisTemplate的序列化器为GenericJackson2JsonRedisSerializer
				
			方案二：
				1、使用StringRedisTemplate
				2、写入Redis时，需要手动把对象序列化为Json
				3、读取Redis时，需要手动将json字符串转换为对象
				
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
			
			





