git
	它是一个免费的、分布式的版本控制工具，或是一个强调了速度快的源代码管理工具。
	
	->版本控制
		<版本迭代>
		1、实现跨区域多人协同开发
		2、追踪和记载一个或多个文件的历史记录
		3、组织和保护源代码与文档
		4、统计工作量
		5、并行开发、提高开发效率
		6、追踪记录整个软件的开发过程
		7、减轻开发人员的负担，节省时间，同时降低人为错误
		

	->集中式版本控制工具
		特点：
			版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，
		再把自己的活推送给中央服务器。
			本地是没有版本库的修改记录的，所以集中式版本控制系统最大的毛病就是必须联网才能工作，如果在局域网内还好，带宽够大，速度够快，可
		如果在互联网上，遇到网速慢的话，可能提交一个10M的文件就需要5分钟。

	->分布式版本控制工具
		特点：
			分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，工作时，就不需要联网了，因为版本库就在你自己的电脑上。
		问题：
			既然每个人电脑上都有一个完整的版本库，那多个人如何协作呢？
		答：
			比方说你在自己电脑上改了文件A，你的同事也在他的电脑上改了文件A，这时，你们俩之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。
			既然是多人协作，我们肯定是需要指定一个人的电脑作为总仓库，所以人从他的电脑上提交更新，拉取别人的提交，这样才能保证他的仓库保留了所有人的改动。
			这个人其实就充当了集中式中的服务器仓库的角色。
			所以我们通常说的分布式管理系统的服务器就是其实就是找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到
			自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
			
	->git工作机制
		
		工作区：代码/文件存放在本地电脑的磁盘目录位置。
				<git add> 添加到暂存区
		暂存区：暂存区可以理解为临时（或者临时）存放内容，不是作为正式提交的版本，但是它已经被git管理，暂存区中的内容可以很容易被git正式提交，
				同时它如果不合适可以进行回退操作。一般存放在"git目录"下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。
				<git commit> 提交到本地库
		本地库：工作区有个隐藏目录.git，它就是Git的本地版本库，每次提交会生成一个版本。
				
				<push>
		远程库：代码托管中心，例如：(互联网上)码云、github	；(局域网上)GitLab
		
	
	-> git下载
		https://npm.taobao.org/mirrors/git-for-windows/
		选择最下面版本<例：v2.36.0.windows.1/>，点进去选择后选择最新版<Git-2.36.0-64-bit.exe>
	-> git安装教程
		https://zhuanlan.zhihu.com/p/443527549
	
	-> git常用命令
		<首次安装必须设置签名>
		git config --global user.name 用户名		// 设置用户签名<例：qlj>
		
		git config --global user.email 邮箱			// 设置用户签名<例：1966910355@qq.com>
		《如何查看签名配置成功？位置：C:\Users\DELL\.gitconfig文件中查看》
		
		git init 				// 初始化本地库<创建一个空的Git仓库或重新初始化一个现有仓库(可以先创建一个本地目录，在目录中打开git命令行，成功后生成.git)>
		
		git status				// 显示工作目录与暂存区的状态
				<On branch master：当前本地库在master分支；
				 No commits yet：目前没有任何提交；
				 nothing to commit：没有需要提交的文件<为创建文件时>
				 
				 Untracked files：发现一个未被追踪的文件，红色文件名：只是存在于工作区
				 
				 Changes to be committed：绿色文件名：已添加到暂存区
				 
				 nothing to commit, working tree clean：提交到本地库后的状态信息
				>
		------------------------------------
			-> 新增文件
				vim hello.txt		<回车进入文本编辑>
				按'i'进入编辑模式；按'esc'退出编辑模式<命令模式>。
				命令模式下：'yy'复制，'p'粘贴，':wq'保存
				
			ll 			// 查看当前目录下的文件
			cat hello.txt		// 查看文档内容
			tail -n 1 hello.txt		// 查看文档最后一行
			
			-> 修改文件
				vim hello.txt -----> i 进入编辑模式 -----> 修改文本 ------> esc 退出编辑模式 ------> :wq 保存
				
				修改后提交到暂存库与本地库。		1 file changed, 2 insertions(+), 2 deletions(-)		一个文件修改，2行新增，2行删除<表示修改>
				
				git reflog查看版本信息。 发现有两个版本。	但是指针指向修改后的版本，所以cat查看时，只查看修改后的版本。
		------------------------------------
			
		git add 文件名.后缀				// 将文件从工作区添加到暂存区		
		
		git rm --cached 文件名.后缀		// 删除暂存区的文件，工作区中的文件未删除		<git status 变成红色名>
		
		git commit -m			// 将暂存区文件提交到本地库。-m 表示版本日志信息<不写-m，也会有，一般手写>
			例：git commit -m "first commit" hello.txt
			
		git reflog			// 查看引用日志信息
		
		git log				// 查看详细日志信息<包括：完整版版本号，指针指向，提交人，提交日期>
		
		------------------------------------
			-> 版本穿梭
				git reset --hard 版本号
					从当前版本退到之前的版本。
					1、先查看版本信息 git reflog，复制想要穿梭的版本号
					2、输入：git reset --hard 版本号
					3、此时指针已经发生偏移，cat文件时查看的是穿梭后的版本
					
				<查看当前指针只想位置：.git\refs\heads\master>

		ctrl + L		// 快速清屏



















